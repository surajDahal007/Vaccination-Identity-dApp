import Head from 'next/head'
import styles from '@/styles/Home.module.css'
import { Navbar,Card,Input,Button} from "@nextui-org/react";
import { useEffect, useRef, useState } from 'react';
import { contractAddress,abi } from '@/constants';
import { ethers } from "ethers";
import Swal from 'sweetalert2'


export default function Home() {

  var detail;

  const[Name,setName] = useState("")

  const[Age,setAge] = useState("")

  const[ID,setID] = useState("")

  const[Location,setLocation] = useState("")

  const[account,setAccount]=useState("")

  const[status,setStatus]= useState("")
  
  const[statusField,setStatusField] = useState("")

  const data = useRef();
  const formRef = useRef();

  useEffect(()=>{
  
    const connectWallet = async()=>{

      try{
        const {ethereum}=window;

        if(ethereum){
          const accounts= await ethereum.request({
            method:"eth_requestAccounts"
          })
  
          console.log(accounts[0]);
          setAccount(accounts);

          window.ethereum.on("accountsChanged",()=>{
            window.location.reload();
          })

          window.ethereum.on("chainChanged",()=>{
            window.location.reload();
          })

        }else{
          alert("Please install metamask")
        }
      }
      catch(error){
        console.error(error)
      }
    }

    connectWallet();

  },[])

  const handleDetail = async()=>{
    var provider= new ethers.providers.Web3Provider(ethereum);
    var signer= provider.getSigner();
    var contract = new ethers.Contract(
      contractAddress,abi,signer
      );


    detail= await contract.details(account[0]);

    setName(`NAME : ${detail[0]}`);
    setAge(`AGE : ${detail[1]}`);
    const int=ethers.utils.formatEther(detail[2]);

    console.log(int*10**18);

    setID(`ID : ${int*10**18}`);
    setLocation(`LOCATION OF VACCINATION : ${detail[3]}`);
  }


  const handleRegister = async()=>{

    var name = document.form.name;
    var age = document.form.age;
    var id = document.form.id;
    var location = document.form.location;

    if(name.value.length<=0){
      name.focus();
      console.log("Full Name is required");
      alert("All details required in Form")
      return false;
    }

    if(age.value.length<=0){
      age.focus();
      console.log("Age is required");
      alert("All details required in Form")
      return false;
    }

    if(age.value>120){
      age.focus();
      console.log("Invalid age");
      alert("Invalid age");
      return false;
    }

    if(id.value.length<=0){
      id.focus();
      alert("All details required in Form")
      console.log("Id is required");
      return false;
    }

    if(location.value.length<=0){
      alert("All details required in Form")
      location.focus();
      console.log("Location is required");
      return false;
    }
 
    var provider= new ethers.providers.Web3Provider(ethereum);
    var signer= provider.getSigner();
    var contract = new ethers.Contract(
      contractAddress,abi,signer
      );

    try{
      const formData = await contract.setter(name.value,age.value,id.value,location.value)
      console.log(formData);
    }  
    catch(e){
      console.error(e)
      alert("This user already registered")
    } 
    formRef.current.reset();
    Swal.fire({
      icon: 'success',
      title: 'Good Job',
      text: 'Details send !',
    })

  }

  const handleCheck = async()=>{

    if(data.current.value.length==0){
      console.log("empty field");
      setStatusField("*Enter account address");
      data.current.focus();
    }
    else{
      setStatusField("")
      var provider= new ethers.providers.Web3Provider(ethereum);
      var signer= provider.getSigner();
      var contract = new ethers.Contract(
        contractAddress,abi,signer
        );

      const address = data.current.value;
      console.log(address); 
      try{
      const accountStatus= await contract.isVaccinated(address);
      console.log(accountStatus);
      if(accountStatus){
        setStatus("True")
      }else{
        setStatus("False")
      }
    }
    catch(e){
      console.error(e);
      alert("Invalid Address")
    }

    }
  }

  return (
    <>
      <Head>
        <title>Vaccinated Identity dApp</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />    
      </Head>

      <div className='main'>
      <Navbar>
        <h1>Vaccine Identity dApp</h1>
          <span className={styles.connectionDetail}>
            <b>Connected Account </b> : <u>{account}</u>
          </span>
      </Navbar>

    
    <div className={styles.input}>
      <Card 
        isHoverable 
        variant="bordered" 
        css={{ mw: "300px" }}
      >
        <Card.Body>
          <h3>Vaccination details Form</h3>
          <form 
            ref={formRef} 
            name='form' 
            method='post'
          >
            <Input 
              clearable label="Name*" 
              placeholder="Name"
              name="name"
            />
            <br />
            <Input 
              clearable label="Age*" 
              placeholder="Age"
              name="age"
            />
            <br />
            <Input 
              clearable label="ID*" 
              placeholder="ID number"
              name="id"
            />
            <br />
            <Input 
              clearable label="Vaccination location*" 
              placeholder="location"
              name="location"
            />
            <br />
            <br />
            <Button 
              shadow 
              color="primary" 
              auto
              onPress={handleRegister}
            >
              Register
            </Button>
          </form>
        </Card.Body>
      </Card>
    </div>

    <div>
      <Card 
        css={{
          mw:"300px",
          marginLeft:"60%",
          marginTop:"-36%"
        }}>
          <Card.Body>
          <Button 
              shadow 
              color="success" 
              auto
              onPress={handleDetail}
            >
              View My Details
            </Button>
            <br />
            {Name}
            <br />
            {Age}
            <br />
            {ID}
            <br />
            {Location}
          </Card.Body>
      </Card>
    </div>

    <div>
      <Card 
        isHoverable
        css={{ 
          mw: "300px",
          marginTop:"3%",
          marginLeft:"60%",
          marginBottom:"2%"     
        }}>
          <Card.Body>
            <h3>Check Vaccination Status <i>!</i></h3>
            <Input 
              clearable label="User Details" 
              placeholder="Account Address"
              ref={data}
            />

            <span className={styles.check}>{statusField}</span>
            
            <Button 
              shadow 
              color="error" 
              auto
              onPress={handleCheck}
              css={{
                mw:"40px",
                marginTop:"5px"
              }}
            >
              Check
            </Button>
            <br />
            <span>Status : <span className={status=="True"? 'true':'false'}> {status} </span> </span> 
            
          </Card.Body>
        </Card>
      </div>  
      </div>
    </>
  )
}
